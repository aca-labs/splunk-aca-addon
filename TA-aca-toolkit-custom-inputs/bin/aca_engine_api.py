import ta_aca_toolkit_custom_inputs_declare

import os
import sys
import time
import datetime
import json

import modinput_wrapper.base_modinput
from solnlib.packages.splunklib import modularinput as smi



import input_module_aca_engine_api as input_module

bin_dir = os.path.basename(__file__)

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_aca_engine_api.py
'''
class ModInputaca_engine_api(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputaca_engine_api, self).__init__("ta_aca_toolkit_custom_inputs", "aca_engine_api", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputaca_engine_api, self).get_scheme()
        scheme.title = ("ACA Engine API")
        scheme.description = ("Go to the add-on\'s configuration UI and configure modular inputs under the Inputs menu.")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(smi.Argument("override_sourcetype", title="Override sourcetype",
                                         description="Override default sourcetype. Recommended to assist with later searches - set to something specific to query.  e.g. ACA_API_Modules, or ACA_API_Dynalite",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("api_endpoint", title="API endpoint",
                                         description="Endpoint to get bearer token from. e.g. https://localhost/auth/oauth/token",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("url_to_query", title="URL to query",
                                         description="Will be the GET modules url from ACA API. e.g. https://localhost/control/api/modules",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("custom_input_", title="Custom input?",
                                         description="Custom inputs as defined in Python script. Select \'No\' unless calling /modules or /systems. Separates multi-events. To make own, edit inputs.conf or edit script for more control.",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("to_obscure", title="To obscure",
                                         description="Replaces  a sensitive value (e.g. password for Booking modules) if included in results with \"obscured\".",
                                         required_on_create=False,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("client_id", title="Client ID",
                                         description="Get this and following values from backoffice. Set up a user for this app. See ACA Engine administrator for assistance.",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("client_secret", title="Client secret",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("username", title="Username",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("password", title="Password",
                                         description="",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("authority", title="Authority",
                                         description="e.g. sgrp-nU3aYzXK0N",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("refresh_token_timer", title="Refresh token timer",
                                         description="Time in seconds for token to expire. Default is 14 days. Do not change unless you know what you\'re doing.",
                                         required_on_create=False,
                                         required_on_edit=False))
        return scheme

    def get_app_name(self):
        return "TA-aca-toolkit-custom-inputs"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(bin_dir, 'global_checkbox_param.json')
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, 'r') as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error('Get exception when loading global checkbox parameter names. ' + str(e))
                self.global_checkbox_fields = []
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInputaca_engine_api().run(sys.argv)
    sys.exit(exitcode)
